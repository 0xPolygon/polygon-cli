// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package uniswapv3

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IUniswapV3StakerIncentiveKey is an auto generated low-level Go binding around an user-defined struct.
type IUniswapV3StakerIncentiveKey struct {
	RewardToken common.Address
	Pool        common.Address
	StartTime   *big.Int
	EndTime     *big.Int
	Refundee    common.Address
}

// UniswapV3StakerMetaData contains all meta data concerning the UniswapV3Staker contract.
var UniswapV3StakerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIUniswapV3Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contractINonfungiblePositionManager\",\"name\":\"_nonfungiblePositionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncentiveStartLeadTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncentiveDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"DepositTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractIERC20Minimal\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contractIUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"IncentiveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"IncentiveEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractIERC20Minimal\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIERC20Minimal\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contractIUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"}],\"internalType\":\"structIUniswapV3Staker.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"createIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"numberOfStakes\",\"type\":\"uint48\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIERC20Minimal\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contractIUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"}],\"internalType\":\"structIUniswapV3Staker.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"endIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractIUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIERC20Minimal\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contractIUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"}],\"internalType\":\"structIUniswapV3Staker.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"secondsInsideX128\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"incentives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRewardUnclaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"totalSecondsClaimedX128\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"numberOfStakes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIncentiveDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIncentiveStartLeadTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"contractINonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Minimal\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIERC20Minimal\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contractIUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"}],\"internalType\":\"structIUniswapV3Staker.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"incentiveId\",\"type\":\"bytes32\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideInitialX128\",\"type\":\"uint160\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contractIERC20Minimal\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contractIUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"}],\"internalType\":\"structIUniswapV3Staker.IncentiveKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101006040523480156200001257600080fd5b50604051620031013803806200310183398101604081905262000035916200005e565b6001600160601b0319606094851b81166080529290931b90911660a05260c05260e052620000c3565b6000806000806080858703121562000074578384fd5b84516200008181620000aa565b60208601519094506200009481620000aa565b6040860151606090960151949790965092505050565b6001600160a01b0381168114620000c057600080fd5b50565b60805160601c60a05160601c60c05160e051612fdf620001226000398061098b5280610a6052508061039152806109f35250806103c0528061040b52806109165280610cfb5280611455525080610e6252806114345250612fdf6000f3fe6080604052600436106101095760003560e01c8063b02c43d011610095578063c45a015511610064578063c45a0155146102ec578063d953186e14610301578063e70b9e271461032f578063f2d2909b1461034f578063f549ab421461036f57610109565b8063b02c43d01461024c578063b44a27221461027c578063b5ada6e41461029e578063c36c1ea5146102be57610109565b80633c423f0b116100dc5780633c423f0b146101a85780633dc0714b146101c85780635cc5e3d9146101dd57806360777795146101fd578063ac9650d81461022c57610109565b806301b754401461010e578063150b7a021461013957806326bfee04146101665780632f2d783d14610188575b600080fd5b34801561011a57600080fd5b5061012361038f565b6040516101309190612dcf565b60405180910390f35b34801561014557600080fd5b50610159610154366004611e62565b6103b3565b604051610130919061247d565b34801561017257600080fd5b506101866101813660046121bf565b61066e565b005b34801561019457600080fd5b506101236101a3366004612069565b610729565b3480156101b457600080fd5b506101866101c33660046121e3565b6107e0565b3480156101d457600080fd5b50610123610989565b3480156101e957600080fd5b506101866101f8366004612195565b6109ad565b34801561020957600080fd5b5061021d610218366004612019565b610b42565b60405161013093929190612def565b61023f61023a366004611efc565b610b76565b604051610130919061241d565b34801561025857600080fd5b5061026c610267366004612019565b610cb6565b60405161013094939291906123e9565b34801561028857600080fd5b50610291610cf9565b6040516101309190612492565b3480156102aa57600080fd5b506101236102b936600461217a565b610d1d565b3480156102ca57600080fd5b506102de6102d9366004612275565b610e07565b604051610130929190612dad565b3480156102f857600080fd5b50610291610e60565b34801561030d57600080fd5b5061032161031c366004612195565b610e84565b604051610130929190612dd8565b34801561033b57600080fd5b5061012361034a366004612031565b611019565b34801561035b57600080fd5b5061018661036a366004612195565b611036565b34801561037b57600080fd5b5061018661038a366004612195565b61107a565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104065760405162461bcd60e51b81526004016103fd90612ca7565b60405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399fbab88876040518263ffffffff1660e01b81526004016104559190612dcf565b6101806040518083038186803b15801561046e57600080fd5b505afa158015610482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a69190612296565b50505050509650965050505050506040518060800160405280886001600160a01b03168152602001600065ffffffffffff1681526020018360020b81526020018260020b8152506001600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001601a6101000a81548162ffffff021916908360020b62ffffff160217905550606082015181600001601d6101000a81548162ffffff021916908360020b62ffffff160217905550905050866001600160a01b031660006001600160a01b0316877fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f60405160405180910390a4831561065a5760a08414156106165761061161060b8587018761217a565b87611362565b61065a565b600061062485870187611f6b565b905060005b81518110156106575761064f82828151811061064157fe5b602002602001015189611362565b600101610629565b50505b50630a85bd0160e11b979650505050505050565b6001600160a01b0381166106945760405162461bcd60e51b81526004016103fd9061279f565b6000828152600160205260409020546001600160a01b03163381146106cb5760405162461bcd60e51b81526004016103fd9061251f565b60008381526001602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915191929084169186917fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f91a4505050565b6001600160a01b0383166000908152600360209081526040808320338452909152902054811580159061075b57508082105b156107635750805b6001600160a01b0384166000908152600360209081526040808320338452909152902080548290039055610798848483611703565b826001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241826040516107d19190612dcf565b60405180910390a29392505050565b6001600160a01b0382163014156108095760405162461bcd60e51b81526004016103fd90612cf9565b600083815260016020908152604091829020825160808101845290546001600160a01b038116825265ffffffffffff600160a01b820416928201839052600160d01b8104600290810b810b810b94830194909452600160e81b9004830b830b90920b60608301521561088d5760405162461bcd60e51b81526004016103fd9061269a565b80516001600160a01b031633146108b65760405162461bcd60e51b81526004016103fd90612a3f565b600084815260016020526040808220829055825190516001600160a01b039091169086907fcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f908490a4604051635c46a7ef60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b88d4fde906109519030908790899088906004016123ac565b600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081116109cd5760405162461bcd60e51b81526004016103fd90612b6c565b81604001514211156109f15760405162461bcd60e51b81526004016103fd906127fc565b7f0000000000000000000000000000000000000000000000000000000000000000428360400151031115610a375760405162461bcd60e51b81526004016103fd90612bb7565b8160600151826040015110610a5e5760405162461bcd60e51b81526004016103fd90612c4f565b7f000000000000000000000000000000000000000000000000000000000000000082604001518360600151031115610aa85760405162461bcd60e51b81526004016103fd90612c03565b6000610ab383611760565b60008181526020819052604090208054840190558351909150610ad890333085611791565b82602001516001600160a01b031683600001516001600160a01b03167fa876344e28d4b5191ad03bc0d43f740e3695827ab0faccac739930b915ef8b0285604001518660600151876080015187604051610b359493929190612e17565b60405180910390a3505050565b600060208190529081526040902080546001909101546001600160a01b03811690600160a01b90046001600160601b031683565b60608167ffffffffffffffff81118015610b8f57600080fd5b50604051908082528060200260200182016040528015610bc357816020015b6060815260200190600190039081610bae5790505b50905060005b82811015610caf5760008030868685818110610be157fe5b9050602002810190610bf39190612e3b565b604051610c0192919061239c565b600060405180830381855af49150503d8060008114610c3c576040519150601f19603f3d011682016040523d82523d6000602084013e610c41565b606091505b509150915081610c8d57604481511015610c5a57600080fd5b60048101905080806020019051810190610c749190612102565b60405162461bcd60e51b81526004016103fd91906124ba565b80848481518110610c9a57fe5b60209081029190910101525050600101610bc9565b5092915050565b6001602052600090815260409020546001600160a01b0381169065ffffffffffff600160a01b82041690600160d01b8104600290810b91600160e81b9004900b84565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008160600151421015610d435760405162461bcd60e51b81526004016103fd906125de565b6000610d4e83611760565b60008181526020819052604090208054935090915082610d805760405162461bcd60e51b81526004016103fd906124cd565b6001810154600160a01b90046001600160601b031615610db25760405162461bcd60e51b81526004016103fd90612a9c565b6000815583516080850151610dc8919085611703565b817f65124e6175aa9904f40735e87e2a37c76e87a609b855287bb4d1aba8257d976384604051610df89190612dcf565b60405180910390a25050919050565b6000828152600260209081526040808320848452909152902080546001600160a01b038116916001600160601b03600160a01b909204821691821415610e585760018101546001600160801b031691505b509250929050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000610e9285611760565b9050600080610ea18684610e07565b915091506000816001600160801b031611610ece5760405162461bcd60e51b81526004016103fd9061258a565b6000868152600160208181526040808420815160808101835290546001600160a01b038082168352600160a01b80830465ffffffffffff1684870152600160d01b8304600290810b810b810b858701908152600160e81b909404810b810b900b60608086019182528c8a52898852868a2087519182018852805482529098015480841689890152919091046001600160601b031687860152948e01519151945193516351c403f960e11b815292969491169263a38807f292610f949291906004016124a6565b60606040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe491906120a9565b50915050611008826000015183602001518c604001518d60600151888a87426117f0565b909b909a5098505050505050505050565b600360209081526000928352604080842090915290825290205481565b6000818152600160205260409020546001600160a01b0316331461106c5760405162461bcd60e51b81526004016103fd90612b0f565b6110768282611362565b5050565b600081815260016020908152604091829020825160808101845290546001600160a01b038116825265ffffffffffff600160a01b82041692820192909252600160d01b8204600290810b810b810b93820193909352600160e81b909104820b820b90910b60608083019190915283015142101561111a5780516001600160a01b0316331461111a5760405162461bcd60e51b81526004016103fd9061290a565b600061112584611760565b90506000806111348584610e07565b91509150806001600160801b0316600014156111625760405162461bcd60e51b81526004016103fd90612647565b6000838152602081815260408083208884526001808452828520805460001965ffffffffffff600160a01b80840482168301909116810265ffffffffffff60a01b199093169290921790925591830180546001600160601b0384820481169093019092169092026001600160a01b0391821617909155928a01518883015160608a015193516351c403f960e11b8152929594919091169263a38807f29261120d9291906004016124a6565b60606040518083038186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d91906120a9565b508354600185015460408c015160608d015193955060009450849361129193926001600160a01b03169190898b89426117f0565b6001860180546001600160a01b031981166001600160a01b039182168401821617909155865483900387558c51811660009081526003602090815260408083208e5190941683529281528282208054860190558d8252600281528282208c8352905290812090815591935091506001600160601b036001600160801b03871610611328576001810180546001600160801b03191690555b60405188908b907fe1ba67e807ae0efa0a9549f9520ddc15c27f0a4dae2bc045e800ca66a940778f90600090a35050505050505050505050565b81604001514210156113865760405162461bcd60e51b81526004016103fd90612986565b816060015142106113a95760405162461bcd60e51b81526004016103fd90612753565b60006113b483611760565b6000818152602081905260409020549091506113e25760405162461bcd60e51b81526004016103fd906128b7565b6000828152600260209081526040808320848452909152902054600160a01b90046001600160601b0316156114295760405162461bcd60e51b81526004016103fd90612702565b60008060008061147a7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008861184f565b935093509350935086602001516001600160a01b0316846001600160a01b0316146114b75760405162461bcd60e51b81526004016103fd906129d8565b6000816001600160801b0316116114e05760405162461bcd60e51b81526004016103fd90612859565b6000868152600160208181526040808420805465ffffffffffff600160a01b80830482168701909116810265ffffffffffff60a01b199092169190911790915589855291849052808420830180546001600160601b0384820481169095019094169092026001600160a01b0393841617909155516351c403f960e11b81529086169063a38807f29061157890879087906004016124a6565b60606040518083038186803b15801561159057600080fd5b505afa1580156115a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c891906120a9565b509150506001600160601b036001600160801b0383161061167757604080516060810182526001600160a01b0380841682526001600160601b0360208084018281526001600160801b0380891686880190815260008f8152600285528881208f825290945296909220945185549151909316600160a01b029284166001600160a01b031990911617909216178255915160019091018054919092166001600160801b03199091161790556116c0565b6000878152600260209081526040808320898452909152902080546001600160a01b0319166001600160a01b038381169190911716600160a01b6001600160601b038516021790555b85877f3fe90ccd0a34e28f2b4b7a1e8323415ed9dd595f4eec5dfd461d18c2df336dbd846040516116f19190612d99565b60405180910390a35050505050505050565b611715836001600160a01b031661193e565b6117505760405162461bcd60e51b815260040180806020018281038252603a815260200180612f12603a913960400191505060405180910390fd5b61175b838383611944565b505050565b6000816040516020016117739190612d56565b6040516020818303038152906040528051906020012090505b919050565b6117a3846001600160a01b031661193e565b6117de5760405162461bcd60e51b815260040180806020018281038252603e815260200180612f4c603e913960400191505060405180910390fd5b6117ea84848484611a92565b50505050565b600080878310156117fd57fe5b508383036001600160801b0386160260006001600160a01b038a1660808a6118258b88611bea565b03901b03905061183f8b836001600160a01b031683611c03565b9250509850989650505050505050565b6000806000806000806000886001600160a01b03166399fbab88896040518263ffffffff1660e01b8152600401808281526020019150506101806040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d6101808110156118ca57600080fd5b50604080820151606080840151608085015160a086015160c087015160e090970151865194850187526001600160a01b0380871686528416602086015262ffffff8316968501969096529b50949950929750909550909350909150611930908b90611cb2565b965050505093509350935093565b3b151590565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b602083106119c05780518252601f1990920191602091820191016119a1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611a22576040519150601f19603f3d011682016040523d82523d6000602084013e611a27565b606091505b5091509150818015611a55575080511580611a555750808060200190516020811015611a5257600080fd5b50515b611a8b576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310611b165780518252601f199092019160209182019101611af7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b78576040519150601f19603f3d011682016040523d82523d6000602084013e611b7d565b606091505b5091509150818015611bab575080511580611bab5750808060200190516020811015611ba857600080fd5b50515b611be2576040805162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015290519081900360640190fd5b505050505050565b600081831015611bfa5781611bfc565b825b9392505050565b6000808060001985870986860292508281109083900303905080611c395760008411611c2e57600080fd5b508290049050611bfc565b808411611c4557600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600081602001516001600160a01b031682600001516001600160a01b031610611cda57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b805161178c81612ef9565b8051600281900b811461178c57600080fd5b600060a08284031215611dc4578081fd5b60405160a0810181811067ffffffffffffffff82111715611de157fe5b6040529050808235611df281612ef9565b81526020830135611e0281612ef9565b8060208301525060408301356040820152606083013560608201526080830135611e2b81612ef9565b6080919091015292915050565b80516001600160801b038116811461178c57600080fd5b805162ffffff8116811461178c57600080fd5b600080600080600060808688031215611e79578081fd5b8535611e8481612ef9565b94506020860135611e9481612ef9565b935060408601359250606086013567ffffffffffffffff80821115611eb7578283fd5b818801915088601f830112611eca578283fd5b813581811115611ed8578384fd5b896020828501011115611ee9578384fd5b9699959850939650602001949392505050565b60008060208385031215611f0e578182fd5b823567ffffffffffffffff80821115611f25578384fd5b818501915085601f830112611f38578384fd5b813581811115611f46578485fd5b8660208083028501011115611f59578485fd5b60209290920196919550909350505050565b60006020808385031215611f7d578182fd5b823567ffffffffffffffff80821115611f94578384fd5b818501915085601f830112611fa7578384fd5b813581811115611fb357fe5b611fc08485830201612e87565b818152848101925083850160a0808402860187018a1015611fdf578788fd5b8795505b8386101561200b57611ff58a83611db3565b8552600195909501949386019390810190611fe3565b509098975050505050505050565b60006020828403121561202a578081fd5b5035919050565b60008060408385031215612043578182fd5b823561204e81612ef9565b9150602083013561205e81612ef9565b809150509250929050565b60008060006060848603121561207d578081fd5b833561208881612ef9565b9250602084013561209881612ef9565b929592945050506040919091013590565b6000806000606084860312156120bd578081fd5b83518060060b81146120cd578182fd5b60208501519093506120de81612ef9565b604085015190925063ffffffff811681146120f7578182fd5b809150509250925092565b600060208284031215612113578081fd5b815167ffffffffffffffff811115612129578182fd5b8201601f81018413612139578182fd5b805161214c61214782612eab565b612e87565b818152856020838501011115612160578384fd5b612171826020830160208601612ecd565b95945050505050565b600060a0828403121561218b578081fd5b611bfc8383611db3565b60008060c083850312156121a7578182fd5b6121b18484611db3565b9460a0939093013593505050565b600080604083850312156121d1578182fd5b82359150602083013561205e81612ef9565b6000806000606084860312156121f7578081fd5b83359250602084013561220981612ef9565b9150604084013567ffffffffffffffff811115612224578182fd5b8401601f81018613612234578182fd5b803561224261214782612eab565b818152876020838501011115612256578384fd5b8160208401602083013783602083830101528093505050509250925092565b60008060408385031215612287578182fd5b50508035926020909101359150565b6000806000806000806000806000806000806101808d8f0312156122b857898afd5b8c516001600160601b03811681146122ce578a8bfd5b9b506122dc60208e01611d96565b9a506122ea60408e01611d96565b99506122f860608e01611d96565b985061230660808e01611e4f565b975061231460a08e01611da1565b965061232260c08e01611da1565b955061233060e08e01611e38565b94506101008d015193506101208d0151925061234f6101408e01611e38565b915061235e6101608e01611e38565b90509295989b509295989b509295989b565b60008151808452612388816020860160208601612ecd565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906123df90830184612370565b9695505050505050565b6001600160a01b0394909416845265ffffffffffff929092166020840152600290810b60408401520b606082015260800190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561247057603f1988860301845261245e858351612370565b94509285019290850190600101612442565b5092979650505050505050565b6001600160e01b031991909116815260200190565b6001600160a01b0391909116815260200190565b600292830b8152910b602082015260400190565b600060208252611bfc6020830184612370565b60208082526032908201527f556e697377617056335374616b65723a3a656e64496e63656e746976653a206e6040820152716f20726566756e6420617661696c61626c6560701b606082015260800190565b60208082526045908201527f556e697377617056335374616b65723a3a7472616e736665724465706f73697460408201527f3a2063616e206f6e6c792062652063616c6c6564206279206465706f7369742060608201526437bbb732b960d91b608082015260a00190565b60208082526034908201527f556e697377617056335374616b65723a3a676574526577617264496e666f3a206040820152731cdd185ad948191bd95cc81b9bdd08195e1a5cdd60621b606082015260800190565b60208082526043908201527f556e697377617056335374616b65723a3a656e64496e63656e746976653a206360408201527f616e6e6f7420656e6420696e63656e74697665206265666f726520656e642074606082015262696d6560e81b608082015260a00190565b60208082526033908201527f556e697377617056335374616b65723a3a756e7374616b65546f6b656e3a20736040820152721d185ad948191bd95cc81b9bdd08195e1a5cdd606a1b606082015260800190565b60208082526042908201527f556e697377617056335374616b65723a3a7769746864726177546f6b656e3a2060408201527f63616e6e6f7420776974686472617720746f6b656e207768696c65207374616b606082015261195960f21b608082015260a00190565b60208082526031908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20746f6b604082015270195b88185b1c9958591e481cdd185ad959607a1b606082015260800190565b6020808252602c908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20696e6360408201526b195b9d1a5d9948195b99195960a21b606082015260800190565b6020808252603c908201527f556e697377617056335374616b65723a3a7472616e736665724465706f73697460408201527f3a20696e76616c6964207472616e7366657220726563697069656e7400000000606082015260800190565b6020808252604990820152600080516020612f8a83398151915260408201527f3a2073746172742074696d65206d757374206265206e6f77206f7220696e207460608201526868652066757475726560b81b608082015260a00190565b602080825260409082018190527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a2063616e908201527f6e6f74207374616b6520746f6b656e20776974682030206c6971756964697479606082015260800190565b60208082526033908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a206e6f6e6040820152722d6578697374656e7420696e63656e7469766560681b606082015260800190565b60208082526056908201527f556e697377617056335374616b65723a3a756e7374616b65546f6b656e3a206f60408201527f6e6c79206f776e65722063616e20776974686472617720746f6b656e206265666060820152756f726520696e63656e7469766520656e642074696d6560501b608082015260a00190565b60208082526032908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20696e63604082015271195b9d1a5d99481b9bdd081cdd185c9d195960721b606082015260800190565b60208082526041908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a20746f6b60408201527f656e20706f6f6c206973206e6f742074686520696e63656e7469766520706f6f6060820152601b60fa1b608082015260a00190565b6020808252603d908201527f556e697377617056335374616b65723a3a7769746864726177546f6b656e3a2060408201527f6f6e6c79206f776e65722063616e20776974686472617720746f6b656e000000606082015260800190565b6020808252604d908201527f556e697377617056335374616b65723a3a656e64496e63656e746976653a206360408201527f616e6e6f7420656e6420696e63656e74697665207768696c65206465706f736960608201526c1d1cc8185c99481cdd185ad959609a1b608082015260a00190565b60208082526037908201527f556e697377617056335374616b65723a3a7374616b65546f6b656e3a206f6e6c60408201527f79206f776e65722063616e207374616b6520746f6b656e000000000000000000606082015260800190565b6020808252603990820152600080516020612f8a83398151915260408201527f3a20726577617264206d75737420626520706f73697469766500000000000000606082015260800190565b60208082526040908201819052600080516020612f8a833981519152908201527f3a2073746172742074696d6520746f6f2066617220696e746f20667574757265606082015260800190565b60208082526040908201819052600080516020612f8a833981519152908201527f3a20696e63656e74697665206475726174696f6e20697320746f6f206c6f6e67606082015260800190565b6020808252604490820152600080516020612f8a83398151915260408201527f3a2073746172742074696d65206d757374206265206265666f726520656e642060608201526374696d6560e01b608082015260a00190565b60208082526032908201527f556e697377617056335374616b65723a3a6f6e45524337323152656365697665604082015271190e881b9bdd0818481d5b9a5d8cc81b999d60721b606082015260800190565b60208082526039908201527f556e697377617056335374616b65723a3a7769746864726177546f6b656e3a2060408201527f63616e6e6f7420776974686472617720746f207374616b657200000000000000606082015260800190565b81516001600160a01b0390811682526020808401518216908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b6001600160801b0391909116815260200190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b039190911660208301526001600160601b0316604082015260600190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b6000808335601e19843603018112612e51578283fd5b83018035915067ffffffffffffffff821115612e6b578283fd5b602001915036819003821315612e8057600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715612ea357fe5b604052919050565b600067ffffffffffffffff821115612ebf57fe5b50601f01601f191660200190565b60005b83811015612ee8578181015183820152602001612ed0565b838111156117ea5750506000910152565b6001600160a01b0381168114612f0e57600080fd5b5056fe5472616e7366657248656c706572457874656e6465643a3a736166655472616e736665723a2063616c6c20746f206e6f6e2d636f6e74726163745472616e7366657248656c706572457874656e6465643a3a736166655472616e7366657246726f6d3a2063616c6c20746f206e6f6e2d636f6e7472616374556e697377617056335374616b65723a3a637265617465496e63656e74697665a2646970667358221220fa929a6c9f6fbcecc8d6fdd303211dd7dd913a1e961061afb464d84f47b5174764736f6c63430007060033",
}

// UniswapV3StakerABI is the input ABI used to generate the binding from.
// Deprecated: Use UniswapV3StakerMetaData.ABI instead.
var UniswapV3StakerABI = UniswapV3StakerMetaData.ABI

// UniswapV3StakerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UniswapV3StakerMetaData.Bin instead.
var UniswapV3StakerBin = UniswapV3StakerMetaData.Bin

// DeployUniswapV3Staker deploys a new Ethereum contract, binding an instance of UniswapV3Staker to it.
func DeployUniswapV3Staker(auth *bind.TransactOpts, backend bind.ContractBackend, _factory common.Address, _nonfungiblePositionManager common.Address, _maxIncentiveStartLeadTime *big.Int, _maxIncentiveDuration *big.Int) (common.Address, *types.Transaction, *UniswapV3Staker, error) {
	parsed, err := UniswapV3StakerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UniswapV3StakerBin), backend, _factory, _nonfungiblePositionManager, _maxIncentiveStartLeadTime, _maxIncentiveDuration)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UniswapV3Staker{UniswapV3StakerCaller: UniswapV3StakerCaller{contract: contract}, UniswapV3StakerTransactor: UniswapV3StakerTransactor{contract: contract}, UniswapV3StakerFilterer: UniswapV3StakerFilterer{contract: contract}}, nil
}

// UniswapV3Staker is an auto generated Go binding around an Ethereum contract.
type UniswapV3Staker struct {
	UniswapV3StakerCaller     // Read-only binding to the contract
	UniswapV3StakerTransactor // Write-only binding to the contract
	UniswapV3StakerFilterer   // Log filterer for contract events
}

// UniswapV3StakerCaller is an auto generated read-only Go binding around an Ethereum contract.
type UniswapV3StakerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapV3StakerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UniswapV3StakerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapV3StakerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UniswapV3StakerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapV3StakerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UniswapV3StakerSession struct {
	Contract     *UniswapV3Staker  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UniswapV3StakerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UniswapV3StakerCallerSession struct {
	Contract *UniswapV3StakerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// UniswapV3StakerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UniswapV3StakerTransactorSession struct {
	Contract     *UniswapV3StakerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// UniswapV3StakerRaw is an auto generated low-level Go binding around an Ethereum contract.
type UniswapV3StakerRaw struct {
	Contract *UniswapV3Staker // Generic contract binding to access the raw methods on
}

// UniswapV3StakerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UniswapV3StakerCallerRaw struct {
	Contract *UniswapV3StakerCaller // Generic read-only contract binding to access the raw methods on
}

// UniswapV3StakerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UniswapV3StakerTransactorRaw struct {
	Contract *UniswapV3StakerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUniswapV3Staker creates a new instance of UniswapV3Staker, bound to a specific deployed contract.
func NewUniswapV3Staker(address common.Address, backend bind.ContractBackend) (*UniswapV3Staker, error) {
	contract, err := bindUniswapV3Staker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UniswapV3Staker{UniswapV3StakerCaller: UniswapV3StakerCaller{contract: contract}, UniswapV3StakerTransactor: UniswapV3StakerTransactor{contract: contract}, UniswapV3StakerFilterer: UniswapV3StakerFilterer{contract: contract}}, nil
}

// NewUniswapV3StakerCaller creates a new read-only instance of UniswapV3Staker, bound to a specific deployed contract.
func NewUniswapV3StakerCaller(address common.Address, caller bind.ContractCaller) (*UniswapV3StakerCaller, error) {
	contract, err := bindUniswapV3Staker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerCaller{contract: contract}, nil
}

// NewUniswapV3StakerTransactor creates a new write-only instance of UniswapV3Staker, bound to a specific deployed contract.
func NewUniswapV3StakerTransactor(address common.Address, transactor bind.ContractTransactor) (*UniswapV3StakerTransactor, error) {
	contract, err := bindUniswapV3Staker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerTransactor{contract: contract}, nil
}

// NewUniswapV3StakerFilterer creates a new log filterer instance of UniswapV3Staker, bound to a specific deployed contract.
func NewUniswapV3StakerFilterer(address common.Address, filterer bind.ContractFilterer) (*UniswapV3StakerFilterer, error) {
	contract, err := bindUniswapV3Staker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerFilterer{contract: contract}, nil
}

// bindUniswapV3Staker binds a generic wrapper to an already deployed contract.
func bindUniswapV3Staker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UniswapV3StakerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapV3Staker *UniswapV3StakerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapV3Staker.Contract.UniswapV3StakerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapV3Staker *UniswapV3StakerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.UniswapV3StakerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapV3Staker *UniswapV3StakerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.UniswapV3StakerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapV3Staker *UniswapV3StakerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapV3Staker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapV3Staker *UniswapV3StakerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapV3Staker *UniswapV3StakerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.contract.Transact(opts, method, params...)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 ) view returns(address owner, uint48 numberOfStakes, int24 tickLower, int24 tickUpper)
func (_UniswapV3Staker *UniswapV3StakerCaller) Deposits(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Owner          common.Address
	NumberOfStakes *big.Int
	TickLower      *big.Int
	TickUpper      *big.Int
}, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "deposits", arg0)

	outstruct := new(struct {
		Owner          common.Address
		NumberOfStakes *big.Int
		TickLower      *big.Int
		TickUpper      *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.NumberOfStakes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TickLower = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.TickUpper = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 ) view returns(address owner, uint48 numberOfStakes, int24 tickLower, int24 tickUpper)
func (_UniswapV3Staker *UniswapV3StakerSession) Deposits(arg0 *big.Int) (struct {
	Owner          common.Address
	NumberOfStakes *big.Int
	TickLower      *big.Int
	TickUpper      *big.Int
}, error) {
	return _UniswapV3Staker.Contract.Deposits(&_UniswapV3Staker.CallOpts, arg0)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 ) view returns(address owner, uint48 numberOfStakes, int24 tickLower, int24 tickUpper)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) Deposits(arg0 *big.Int) (struct {
	Owner          common.Address
	NumberOfStakes *big.Int
	TickLower      *big.Int
	TickUpper      *big.Int
}, error) {
	return _UniswapV3Staker.Contract.Deposits(&_UniswapV3Staker.CallOpts, arg0)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_UniswapV3Staker *UniswapV3StakerCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_UniswapV3Staker *UniswapV3StakerSession) Factory() (common.Address, error) {
	return _UniswapV3Staker.Contract.Factory(&_UniswapV3Staker.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) Factory() (common.Address, error) {
	return _UniswapV3Staker.Contract.Factory(&_UniswapV3Staker.CallOpts)
}

// GetRewardInfo is a free data retrieval call binding the contract method 0xd953186e.
//
// Solidity: function getRewardInfo((address,address,uint256,uint256,address) key, uint256 tokenId) view returns(uint256 reward, uint160 secondsInsideX128)
func (_UniswapV3Staker *UniswapV3StakerCaller) GetRewardInfo(opts *bind.CallOpts, key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (struct {
	Reward            *big.Int
	SecondsInsideX128 *big.Int
}, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "getRewardInfo", key, tokenId)

	outstruct := new(struct {
		Reward            *big.Int
		SecondsInsideX128 *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Reward = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.SecondsInsideX128 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetRewardInfo is a free data retrieval call binding the contract method 0xd953186e.
//
// Solidity: function getRewardInfo((address,address,uint256,uint256,address) key, uint256 tokenId) view returns(uint256 reward, uint160 secondsInsideX128)
func (_UniswapV3Staker *UniswapV3StakerSession) GetRewardInfo(key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (struct {
	Reward            *big.Int
	SecondsInsideX128 *big.Int
}, error) {
	return _UniswapV3Staker.Contract.GetRewardInfo(&_UniswapV3Staker.CallOpts, key, tokenId)
}

// GetRewardInfo is a free data retrieval call binding the contract method 0xd953186e.
//
// Solidity: function getRewardInfo((address,address,uint256,uint256,address) key, uint256 tokenId) view returns(uint256 reward, uint160 secondsInsideX128)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) GetRewardInfo(key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (struct {
	Reward            *big.Int
	SecondsInsideX128 *big.Int
}, error) {
	return _UniswapV3Staker.Contract.GetRewardInfo(&_UniswapV3Staker.CallOpts, key, tokenId)
}

// Incentives is a free data retrieval call binding the contract method 0x60777795.
//
// Solidity: function incentives(bytes32 ) view returns(uint256 totalRewardUnclaimed, uint160 totalSecondsClaimedX128, uint96 numberOfStakes)
func (_UniswapV3Staker *UniswapV3StakerCaller) Incentives(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TotalRewardUnclaimed    *big.Int
	TotalSecondsClaimedX128 *big.Int
	NumberOfStakes          *big.Int
}, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "incentives", arg0)

	outstruct := new(struct {
		TotalRewardUnclaimed    *big.Int
		TotalSecondsClaimedX128 *big.Int
		NumberOfStakes          *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalRewardUnclaimed = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TotalSecondsClaimedX128 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NumberOfStakes = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Incentives is a free data retrieval call binding the contract method 0x60777795.
//
// Solidity: function incentives(bytes32 ) view returns(uint256 totalRewardUnclaimed, uint160 totalSecondsClaimedX128, uint96 numberOfStakes)
func (_UniswapV3Staker *UniswapV3StakerSession) Incentives(arg0 [32]byte) (struct {
	TotalRewardUnclaimed    *big.Int
	TotalSecondsClaimedX128 *big.Int
	NumberOfStakes          *big.Int
}, error) {
	return _UniswapV3Staker.Contract.Incentives(&_UniswapV3Staker.CallOpts, arg0)
}

// Incentives is a free data retrieval call binding the contract method 0x60777795.
//
// Solidity: function incentives(bytes32 ) view returns(uint256 totalRewardUnclaimed, uint160 totalSecondsClaimedX128, uint96 numberOfStakes)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) Incentives(arg0 [32]byte) (struct {
	TotalRewardUnclaimed    *big.Int
	TotalSecondsClaimedX128 *big.Int
	NumberOfStakes          *big.Int
}, error) {
	return _UniswapV3Staker.Contract.Incentives(&_UniswapV3Staker.CallOpts, arg0)
}

// MaxIncentiveDuration is a free data retrieval call binding the contract method 0x3dc0714b.
//
// Solidity: function maxIncentiveDuration() view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerCaller) MaxIncentiveDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "maxIncentiveDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxIncentiveDuration is a free data retrieval call binding the contract method 0x3dc0714b.
//
// Solidity: function maxIncentiveDuration() view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerSession) MaxIncentiveDuration() (*big.Int, error) {
	return _UniswapV3Staker.Contract.MaxIncentiveDuration(&_UniswapV3Staker.CallOpts)
}

// MaxIncentiveDuration is a free data retrieval call binding the contract method 0x3dc0714b.
//
// Solidity: function maxIncentiveDuration() view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) MaxIncentiveDuration() (*big.Int, error) {
	return _UniswapV3Staker.Contract.MaxIncentiveDuration(&_UniswapV3Staker.CallOpts)
}

// MaxIncentiveStartLeadTime is a free data retrieval call binding the contract method 0x01b75440.
//
// Solidity: function maxIncentiveStartLeadTime() view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerCaller) MaxIncentiveStartLeadTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "maxIncentiveStartLeadTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxIncentiveStartLeadTime is a free data retrieval call binding the contract method 0x01b75440.
//
// Solidity: function maxIncentiveStartLeadTime() view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerSession) MaxIncentiveStartLeadTime() (*big.Int, error) {
	return _UniswapV3Staker.Contract.MaxIncentiveStartLeadTime(&_UniswapV3Staker.CallOpts)
}

// MaxIncentiveStartLeadTime is a free data retrieval call binding the contract method 0x01b75440.
//
// Solidity: function maxIncentiveStartLeadTime() view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) MaxIncentiveStartLeadTime() (*big.Int, error) {
	return _UniswapV3Staker.Contract.MaxIncentiveStartLeadTime(&_UniswapV3Staker.CallOpts)
}

// NonfungiblePositionManager is a free data retrieval call binding the contract method 0xb44a2722.
//
// Solidity: function nonfungiblePositionManager() view returns(address)
func (_UniswapV3Staker *UniswapV3StakerCaller) NonfungiblePositionManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "nonfungiblePositionManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NonfungiblePositionManager is a free data retrieval call binding the contract method 0xb44a2722.
//
// Solidity: function nonfungiblePositionManager() view returns(address)
func (_UniswapV3Staker *UniswapV3StakerSession) NonfungiblePositionManager() (common.Address, error) {
	return _UniswapV3Staker.Contract.NonfungiblePositionManager(&_UniswapV3Staker.CallOpts)
}

// NonfungiblePositionManager is a free data retrieval call binding the contract method 0xb44a2722.
//
// Solidity: function nonfungiblePositionManager() view returns(address)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) NonfungiblePositionManager() (common.Address, error) {
	return _UniswapV3Staker.Contract.NonfungiblePositionManager(&_UniswapV3Staker.CallOpts)
}

// Rewards is a free data retrieval call binding the contract method 0xe70b9e27.
//
// Solidity: function rewards(address , address ) view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerCaller) Rewards(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "rewards", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Rewards is a free data retrieval call binding the contract method 0xe70b9e27.
//
// Solidity: function rewards(address , address ) view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerSession) Rewards(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _UniswapV3Staker.Contract.Rewards(&_UniswapV3Staker.CallOpts, arg0, arg1)
}

// Rewards is a free data retrieval call binding the contract method 0xe70b9e27.
//
// Solidity: function rewards(address , address ) view returns(uint256)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) Rewards(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _UniswapV3Staker.Contract.Rewards(&_UniswapV3Staker.CallOpts, arg0, arg1)
}

// Stakes is a free data retrieval call binding the contract method 0xc36c1ea5.
//
// Solidity: function stakes(uint256 tokenId, bytes32 incentiveId) view returns(uint160 secondsPerLiquidityInsideInitialX128, uint128 liquidity)
func (_UniswapV3Staker *UniswapV3StakerCaller) Stakes(opts *bind.CallOpts, tokenId *big.Int, incentiveId [32]byte) (struct {
	SecondsPerLiquidityInsideInitialX128 *big.Int
	Liquidity                            *big.Int
}, error) {
	var out []interface{}
	err := _UniswapV3Staker.contract.Call(opts, &out, "stakes", tokenId, incentiveId)

	outstruct := new(struct {
		SecondsPerLiquidityInsideInitialX128 *big.Int
		Liquidity                            *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SecondsPerLiquidityInsideInitialX128 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Liquidity = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Stakes is a free data retrieval call binding the contract method 0xc36c1ea5.
//
// Solidity: function stakes(uint256 tokenId, bytes32 incentiveId) view returns(uint160 secondsPerLiquidityInsideInitialX128, uint128 liquidity)
func (_UniswapV3Staker *UniswapV3StakerSession) Stakes(tokenId *big.Int, incentiveId [32]byte) (struct {
	SecondsPerLiquidityInsideInitialX128 *big.Int
	Liquidity                            *big.Int
}, error) {
	return _UniswapV3Staker.Contract.Stakes(&_UniswapV3Staker.CallOpts, tokenId, incentiveId)
}

// Stakes is a free data retrieval call binding the contract method 0xc36c1ea5.
//
// Solidity: function stakes(uint256 tokenId, bytes32 incentiveId) view returns(uint160 secondsPerLiquidityInsideInitialX128, uint128 liquidity)
func (_UniswapV3Staker *UniswapV3StakerCallerSession) Stakes(tokenId *big.Int, incentiveId [32]byte) (struct {
	SecondsPerLiquidityInsideInitialX128 *big.Int
	Liquidity                            *big.Int
}, error) {
	return _UniswapV3Staker.Contract.Stakes(&_UniswapV3Staker.CallOpts, tokenId, incentiveId)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x2f2d783d.
//
// Solidity: function claimReward(address rewardToken, address to, uint256 amountRequested) returns(uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerTransactor) ClaimReward(opts *bind.TransactOpts, rewardToken common.Address, to common.Address, amountRequested *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "claimReward", rewardToken, to, amountRequested)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x2f2d783d.
//
// Solidity: function claimReward(address rewardToken, address to, uint256 amountRequested) returns(uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerSession) ClaimReward(rewardToken common.Address, to common.Address, amountRequested *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.ClaimReward(&_UniswapV3Staker.TransactOpts, rewardToken, to, amountRequested)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x2f2d783d.
//
// Solidity: function claimReward(address rewardToken, address to, uint256 amountRequested) returns(uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) ClaimReward(rewardToken common.Address, to common.Address, amountRequested *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.ClaimReward(&_UniswapV3Staker.TransactOpts, rewardToken, to, amountRequested)
}

// CreateIncentive is a paid mutator transaction binding the contract method 0x5cc5e3d9.
//
// Solidity: function createIncentive((address,address,uint256,uint256,address) key, uint256 reward) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactor) CreateIncentive(opts *bind.TransactOpts, key IUniswapV3StakerIncentiveKey, reward *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "createIncentive", key, reward)
}

// CreateIncentive is a paid mutator transaction binding the contract method 0x5cc5e3d9.
//
// Solidity: function createIncentive((address,address,uint256,uint256,address) key, uint256 reward) returns()
func (_UniswapV3Staker *UniswapV3StakerSession) CreateIncentive(key IUniswapV3StakerIncentiveKey, reward *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.CreateIncentive(&_UniswapV3Staker.TransactOpts, key, reward)
}

// CreateIncentive is a paid mutator transaction binding the contract method 0x5cc5e3d9.
//
// Solidity: function createIncentive((address,address,uint256,uint256,address) key, uint256 reward) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) CreateIncentive(key IUniswapV3StakerIncentiveKey, reward *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.CreateIncentive(&_UniswapV3Staker.TransactOpts, key, reward)
}

// EndIncentive is a paid mutator transaction binding the contract method 0xb5ada6e4.
//
// Solidity: function endIncentive((address,address,uint256,uint256,address) key) returns(uint256 refund)
func (_UniswapV3Staker *UniswapV3StakerTransactor) EndIncentive(opts *bind.TransactOpts, key IUniswapV3StakerIncentiveKey) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "endIncentive", key)
}

// EndIncentive is a paid mutator transaction binding the contract method 0xb5ada6e4.
//
// Solidity: function endIncentive((address,address,uint256,uint256,address) key) returns(uint256 refund)
func (_UniswapV3Staker *UniswapV3StakerSession) EndIncentive(key IUniswapV3StakerIncentiveKey) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.EndIncentive(&_UniswapV3Staker.TransactOpts, key)
}

// EndIncentive is a paid mutator transaction binding the contract method 0xb5ada6e4.
//
// Solidity: function endIncentive((address,address,uint256,uint256,address) key) returns(uint256 refund)
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) EndIncentive(key IUniswapV3StakerIncentiveKey) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.EndIncentive(&_UniswapV3Staker.TransactOpts, key)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_UniswapV3Staker *UniswapV3StakerTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_UniswapV3Staker *UniswapV3StakerSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.Multicall(&_UniswapV3Staker.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.Multicall(&_UniswapV3Staker.TransactOpts, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address from, uint256 tokenId, bytes data) returns(bytes4)
func (_UniswapV3Staker *UniswapV3StakerTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "onERC721Received", arg0, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address from, uint256 tokenId, bytes data) returns(bytes4)
func (_UniswapV3Staker *UniswapV3StakerSession) OnERC721Received(arg0 common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.OnERC721Received(&_UniswapV3Staker.TransactOpts, arg0, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address from, uint256 tokenId, bytes data) returns(bytes4)
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) OnERC721Received(arg0 common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.OnERC721Received(&_UniswapV3Staker.TransactOpts, arg0, from, tokenId, data)
}

// StakeToken is a paid mutator transaction binding the contract method 0xf2d2909b.
//
// Solidity: function stakeToken((address,address,uint256,uint256,address) key, uint256 tokenId) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactor) StakeToken(opts *bind.TransactOpts, key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "stakeToken", key, tokenId)
}

// StakeToken is a paid mutator transaction binding the contract method 0xf2d2909b.
//
// Solidity: function stakeToken((address,address,uint256,uint256,address) key, uint256 tokenId) returns()
func (_UniswapV3Staker *UniswapV3StakerSession) StakeToken(key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.StakeToken(&_UniswapV3Staker.TransactOpts, key, tokenId)
}

// StakeToken is a paid mutator transaction binding the contract method 0xf2d2909b.
//
// Solidity: function stakeToken((address,address,uint256,uint256,address) key, uint256 tokenId) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) StakeToken(key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.StakeToken(&_UniswapV3Staker.TransactOpts, key, tokenId)
}

// TransferDeposit is a paid mutator transaction binding the contract method 0x26bfee04.
//
// Solidity: function transferDeposit(uint256 tokenId, address to) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactor) TransferDeposit(opts *bind.TransactOpts, tokenId *big.Int, to common.Address) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "transferDeposit", tokenId, to)
}

// TransferDeposit is a paid mutator transaction binding the contract method 0x26bfee04.
//
// Solidity: function transferDeposit(uint256 tokenId, address to) returns()
func (_UniswapV3Staker *UniswapV3StakerSession) TransferDeposit(tokenId *big.Int, to common.Address) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.TransferDeposit(&_UniswapV3Staker.TransactOpts, tokenId, to)
}

// TransferDeposit is a paid mutator transaction binding the contract method 0x26bfee04.
//
// Solidity: function transferDeposit(uint256 tokenId, address to) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) TransferDeposit(tokenId *big.Int, to common.Address) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.TransferDeposit(&_UniswapV3Staker.TransactOpts, tokenId, to)
}

// UnstakeToken is a paid mutator transaction binding the contract method 0xf549ab42.
//
// Solidity: function unstakeToken((address,address,uint256,uint256,address) key, uint256 tokenId) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactor) UnstakeToken(opts *bind.TransactOpts, key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "unstakeToken", key, tokenId)
}

// UnstakeToken is a paid mutator transaction binding the contract method 0xf549ab42.
//
// Solidity: function unstakeToken((address,address,uint256,uint256,address) key, uint256 tokenId) returns()
func (_UniswapV3Staker *UniswapV3StakerSession) UnstakeToken(key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.UnstakeToken(&_UniswapV3Staker.TransactOpts, key, tokenId)
}

// UnstakeToken is a paid mutator transaction binding the contract method 0xf549ab42.
//
// Solidity: function unstakeToken((address,address,uint256,uint256,address) key, uint256 tokenId) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) UnstakeToken(key IUniswapV3StakerIncentiveKey, tokenId *big.Int) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.UnstakeToken(&_UniswapV3Staker.TransactOpts, key, tokenId)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x3c423f0b.
//
// Solidity: function withdrawToken(uint256 tokenId, address to, bytes data) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactor) WithdrawToken(opts *bind.TransactOpts, tokenId *big.Int, to common.Address, data []byte) (*types.Transaction, error) {
	return _UniswapV3Staker.contract.Transact(opts, "withdrawToken", tokenId, to, data)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x3c423f0b.
//
// Solidity: function withdrawToken(uint256 tokenId, address to, bytes data) returns()
func (_UniswapV3Staker *UniswapV3StakerSession) WithdrawToken(tokenId *big.Int, to common.Address, data []byte) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.WithdrawToken(&_UniswapV3Staker.TransactOpts, tokenId, to, data)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0x3c423f0b.
//
// Solidity: function withdrawToken(uint256 tokenId, address to, bytes data) returns()
func (_UniswapV3Staker *UniswapV3StakerTransactorSession) WithdrawToken(tokenId *big.Int, to common.Address, data []byte) (*types.Transaction, error) {
	return _UniswapV3Staker.Contract.WithdrawToken(&_UniswapV3Staker.TransactOpts, tokenId, to, data)
}

// UniswapV3StakerDepositTransferredIterator is returned from FilterDepositTransferred and is used to iterate over the raw logs and unpacked data for DepositTransferred events raised by the UniswapV3Staker contract.
type UniswapV3StakerDepositTransferredIterator struct {
	Event *UniswapV3StakerDepositTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapV3StakerDepositTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapV3StakerDepositTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapV3StakerDepositTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapV3StakerDepositTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapV3StakerDepositTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapV3StakerDepositTransferred represents a DepositTransferred event raised by the UniswapV3Staker contract.
type UniswapV3StakerDepositTransferred struct {
	TokenId  *big.Int
	OldOwner common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDepositTransferred is a free log retrieval operation binding the contract event 0xcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f.
//
// Solidity: event DepositTransferred(uint256 indexed tokenId, address indexed oldOwner, address indexed newOwner)
func (_UniswapV3Staker *UniswapV3StakerFilterer) FilterDepositTransferred(opts *bind.FilterOpts, tokenId []*big.Int, oldOwner []common.Address, newOwner []common.Address) (*UniswapV3StakerDepositTransferredIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.FilterLogs(opts, "DepositTransferred", tokenIdRule, oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerDepositTransferredIterator{contract: _UniswapV3Staker.contract, event: "DepositTransferred", logs: logs, sub: sub}, nil
}

// WatchDepositTransferred is a free log subscription operation binding the contract event 0xcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f.
//
// Solidity: event DepositTransferred(uint256 indexed tokenId, address indexed oldOwner, address indexed newOwner)
func (_UniswapV3Staker *UniswapV3StakerFilterer) WatchDepositTransferred(opts *bind.WatchOpts, sink chan<- *UniswapV3StakerDepositTransferred, tokenId []*big.Int, oldOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.WatchLogs(opts, "DepositTransferred", tokenIdRule, oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapV3StakerDepositTransferred)
				if err := _UniswapV3Staker.contract.UnpackLog(event, "DepositTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositTransferred is a log parse operation binding the contract event 0xcdfc765b85e1048bee3c6a0f9d1c91fc7c4631f5fe5745a55fc6843db5c3260f.
//
// Solidity: event DepositTransferred(uint256 indexed tokenId, address indexed oldOwner, address indexed newOwner)
func (_UniswapV3Staker *UniswapV3StakerFilterer) ParseDepositTransferred(log types.Log) (*UniswapV3StakerDepositTransferred, error) {
	event := new(UniswapV3StakerDepositTransferred)
	if err := _UniswapV3Staker.contract.UnpackLog(event, "DepositTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapV3StakerIncentiveCreatedIterator is returned from FilterIncentiveCreated and is used to iterate over the raw logs and unpacked data for IncentiveCreated events raised by the UniswapV3Staker contract.
type UniswapV3StakerIncentiveCreatedIterator struct {
	Event *UniswapV3StakerIncentiveCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapV3StakerIncentiveCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapV3StakerIncentiveCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapV3StakerIncentiveCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapV3StakerIncentiveCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapV3StakerIncentiveCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapV3StakerIncentiveCreated represents a IncentiveCreated event raised by the UniswapV3Staker contract.
type UniswapV3StakerIncentiveCreated struct {
	RewardToken common.Address
	Pool        common.Address
	StartTime   *big.Int
	EndTime     *big.Int
	Refundee    common.Address
	Reward      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterIncentiveCreated is a free log retrieval operation binding the contract event 0xa876344e28d4b5191ad03bc0d43f740e3695827ab0faccac739930b915ef8b02.
//
// Solidity: event IncentiveCreated(address indexed rewardToken, address indexed pool, uint256 startTime, uint256 endTime, address refundee, uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerFilterer) FilterIncentiveCreated(opts *bind.FilterOpts, rewardToken []common.Address, pool []common.Address) (*UniswapV3StakerIncentiveCreatedIterator, error) {

	var rewardTokenRule []interface{}
	for _, rewardTokenItem := range rewardToken {
		rewardTokenRule = append(rewardTokenRule, rewardTokenItem)
	}
	var poolRule []interface{}
	for _, poolItem := range pool {
		poolRule = append(poolRule, poolItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.FilterLogs(opts, "IncentiveCreated", rewardTokenRule, poolRule)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerIncentiveCreatedIterator{contract: _UniswapV3Staker.contract, event: "IncentiveCreated", logs: logs, sub: sub}, nil
}

// WatchIncentiveCreated is a free log subscription operation binding the contract event 0xa876344e28d4b5191ad03bc0d43f740e3695827ab0faccac739930b915ef8b02.
//
// Solidity: event IncentiveCreated(address indexed rewardToken, address indexed pool, uint256 startTime, uint256 endTime, address refundee, uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerFilterer) WatchIncentiveCreated(opts *bind.WatchOpts, sink chan<- *UniswapV3StakerIncentiveCreated, rewardToken []common.Address, pool []common.Address) (event.Subscription, error) {

	var rewardTokenRule []interface{}
	for _, rewardTokenItem := range rewardToken {
		rewardTokenRule = append(rewardTokenRule, rewardTokenItem)
	}
	var poolRule []interface{}
	for _, poolItem := range pool {
		poolRule = append(poolRule, poolItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.WatchLogs(opts, "IncentiveCreated", rewardTokenRule, poolRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapV3StakerIncentiveCreated)
				if err := _UniswapV3Staker.contract.UnpackLog(event, "IncentiveCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncentiveCreated is a log parse operation binding the contract event 0xa876344e28d4b5191ad03bc0d43f740e3695827ab0faccac739930b915ef8b02.
//
// Solidity: event IncentiveCreated(address indexed rewardToken, address indexed pool, uint256 startTime, uint256 endTime, address refundee, uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerFilterer) ParseIncentiveCreated(log types.Log) (*UniswapV3StakerIncentiveCreated, error) {
	event := new(UniswapV3StakerIncentiveCreated)
	if err := _UniswapV3Staker.contract.UnpackLog(event, "IncentiveCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapV3StakerIncentiveEndedIterator is returned from FilterIncentiveEnded and is used to iterate over the raw logs and unpacked data for IncentiveEnded events raised by the UniswapV3Staker contract.
type UniswapV3StakerIncentiveEndedIterator struct {
	Event *UniswapV3StakerIncentiveEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapV3StakerIncentiveEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapV3StakerIncentiveEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapV3StakerIncentiveEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapV3StakerIncentiveEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapV3StakerIncentiveEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapV3StakerIncentiveEnded represents a IncentiveEnded event raised by the UniswapV3Staker contract.
type UniswapV3StakerIncentiveEnded struct {
	IncentiveId [32]byte
	Refund      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterIncentiveEnded is a free log retrieval operation binding the contract event 0x65124e6175aa9904f40735e87e2a37c76e87a609b855287bb4d1aba8257d9763.
//
// Solidity: event IncentiveEnded(bytes32 indexed incentiveId, uint256 refund)
func (_UniswapV3Staker *UniswapV3StakerFilterer) FilterIncentiveEnded(opts *bind.FilterOpts, incentiveId [][32]byte) (*UniswapV3StakerIncentiveEndedIterator, error) {

	var incentiveIdRule []interface{}
	for _, incentiveIdItem := range incentiveId {
		incentiveIdRule = append(incentiveIdRule, incentiveIdItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.FilterLogs(opts, "IncentiveEnded", incentiveIdRule)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerIncentiveEndedIterator{contract: _UniswapV3Staker.contract, event: "IncentiveEnded", logs: logs, sub: sub}, nil
}

// WatchIncentiveEnded is a free log subscription operation binding the contract event 0x65124e6175aa9904f40735e87e2a37c76e87a609b855287bb4d1aba8257d9763.
//
// Solidity: event IncentiveEnded(bytes32 indexed incentiveId, uint256 refund)
func (_UniswapV3Staker *UniswapV3StakerFilterer) WatchIncentiveEnded(opts *bind.WatchOpts, sink chan<- *UniswapV3StakerIncentiveEnded, incentiveId [][32]byte) (event.Subscription, error) {

	var incentiveIdRule []interface{}
	for _, incentiveIdItem := range incentiveId {
		incentiveIdRule = append(incentiveIdRule, incentiveIdItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.WatchLogs(opts, "IncentiveEnded", incentiveIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapV3StakerIncentiveEnded)
				if err := _UniswapV3Staker.contract.UnpackLog(event, "IncentiveEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncentiveEnded is a log parse operation binding the contract event 0x65124e6175aa9904f40735e87e2a37c76e87a609b855287bb4d1aba8257d9763.
//
// Solidity: event IncentiveEnded(bytes32 indexed incentiveId, uint256 refund)
func (_UniswapV3Staker *UniswapV3StakerFilterer) ParseIncentiveEnded(log types.Log) (*UniswapV3StakerIncentiveEnded, error) {
	event := new(UniswapV3StakerIncentiveEnded)
	if err := _UniswapV3Staker.contract.UnpackLog(event, "IncentiveEnded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapV3StakerRewardClaimedIterator is returned from FilterRewardClaimed and is used to iterate over the raw logs and unpacked data for RewardClaimed events raised by the UniswapV3Staker contract.
type UniswapV3StakerRewardClaimedIterator struct {
	Event *UniswapV3StakerRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapV3StakerRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapV3StakerRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapV3StakerRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapV3StakerRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapV3StakerRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapV3StakerRewardClaimed represents a RewardClaimed event raised by the UniswapV3Staker contract.
type UniswapV3StakerRewardClaimed struct {
	To     common.Address
	Reward *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimed is a free log retrieval operation binding the contract event 0x106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241.
//
// Solidity: event RewardClaimed(address indexed to, uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerFilterer) FilterRewardClaimed(opts *bind.FilterOpts, to []common.Address) (*UniswapV3StakerRewardClaimedIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.FilterLogs(opts, "RewardClaimed", toRule)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerRewardClaimedIterator{contract: _UniswapV3Staker.contract, event: "RewardClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardClaimed is a free log subscription operation binding the contract event 0x106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241.
//
// Solidity: event RewardClaimed(address indexed to, uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerFilterer) WatchRewardClaimed(opts *bind.WatchOpts, sink chan<- *UniswapV3StakerRewardClaimed, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.WatchLogs(opts, "RewardClaimed", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapV3StakerRewardClaimed)
				if err := _UniswapV3Staker.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardClaimed is a log parse operation binding the contract event 0x106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241.
//
// Solidity: event RewardClaimed(address indexed to, uint256 reward)
func (_UniswapV3Staker *UniswapV3StakerFilterer) ParseRewardClaimed(log types.Log) (*UniswapV3StakerRewardClaimed, error) {
	event := new(UniswapV3StakerRewardClaimed)
	if err := _UniswapV3Staker.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapV3StakerTokenStakedIterator is returned from FilterTokenStaked and is used to iterate over the raw logs and unpacked data for TokenStaked events raised by the UniswapV3Staker contract.
type UniswapV3StakerTokenStakedIterator struct {
	Event *UniswapV3StakerTokenStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapV3StakerTokenStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapV3StakerTokenStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapV3StakerTokenStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapV3StakerTokenStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapV3StakerTokenStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapV3StakerTokenStaked represents a TokenStaked event raised by the UniswapV3Staker contract.
type UniswapV3StakerTokenStaked struct {
	TokenId     *big.Int
	IncentiveId [32]byte
	Liquidity   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterTokenStaked is a free log retrieval operation binding the contract event 0x3fe90ccd0a34e28f2b4b7a1e8323415ed9dd595f4eec5dfd461d18c2df336dbd.
//
// Solidity: event TokenStaked(uint256 indexed tokenId, bytes32 indexed incentiveId, uint128 liquidity)
func (_UniswapV3Staker *UniswapV3StakerFilterer) FilterTokenStaked(opts *bind.FilterOpts, tokenId []*big.Int, incentiveId [][32]byte) (*UniswapV3StakerTokenStakedIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var incentiveIdRule []interface{}
	for _, incentiveIdItem := range incentiveId {
		incentiveIdRule = append(incentiveIdRule, incentiveIdItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.FilterLogs(opts, "TokenStaked", tokenIdRule, incentiveIdRule)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerTokenStakedIterator{contract: _UniswapV3Staker.contract, event: "TokenStaked", logs: logs, sub: sub}, nil
}

// WatchTokenStaked is a free log subscription operation binding the contract event 0x3fe90ccd0a34e28f2b4b7a1e8323415ed9dd595f4eec5dfd461d18c2df336dbd.
//
// Solidity: event TokenStaked(uint256 indexed tokenId, bytes32 indexed incentiveId, uint128 liquidity)
func (_UniswapV3Staker *UniswapV3StakerFilterer) WatchTokenStaked(opts *bind.WatchOpts, sink chan<- *UniswapV3StakerTokenStaked, tokenId []*big.Int, incentiveId [][32]byte) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var incentiveIdRule []interface{}
	for _, incentiveIdItem := range incentiveId {
		incentiveIdRule = append(incentiveIdRule, incentiveIdItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.WatchLogs(opts, "TokenStaked", tokenIdRule, incentiveIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapV3StakerTokenStaked)
				if err := _UniswapV3Staker.contract.UnpackLog(event, "TokenStaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenStaked is a log parse operation binding the contract event 0x3fe90ccd0a34e28f2b4b7a1e8323415ed9dd595f4eec5dfd461d18c2df336dbd.
//
// Solidity: event TokenStaked(uint256 indexed tokenId, bytes32 indexed incentiveId, uint128 liquidity)
func (_UniswapV3Staker *UniswapV3StakerFilterer) ParseTokenStaked(log types.Log) (*UniswapV3StakerTokenStaked, error) {
	event := new(UniswapV3StakerTokenStaked)
	if err := _UniswapV3Staker.contract.UnpackLog(event, "TokenStaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapV3StakerTokenUnstakedIterator is returned from FilterTokenUnstaked and is used to iterate over the raw logs and unpacked data for TokenUnstaked events raised by the UniswapV3Staker contract.
type UniswapV3StakerTokenUnstakedIterator struct {
	Event *UniswapV3StakerTokenUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapV3StakerTokenUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapV3StakerTokenUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapV3StakerTokenUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapV3StakerTokenUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapV3StakerTokenUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapV3StakerTokenUnstaked represents a TokenUnstaked event raised by the UniswapV3Staker contract.
type UniswapV3StakerTokenUnstaked struct {
	TokenId     *big.Int
	IncentiveId [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterTokenUnstaked is a free log retrieval operation binding the contract event 0xe1ba67e807ae0efa0a9549f9520ddc15c27f0a4dae2bc045e800ca66a940778f.
//
// Solidity: event TokenUnstaked(uint256 indexed tokenId, bytes32 indexed incentiveId)
func (_UniswapV3Staker *UniswapV3StakerFilterer) FilterTokenUnstaked(opts *bind.FilterOpts, tokenId []*big.Int, incentiveId [][32]byte) (*UniswapV3StakerTokenUnstakedIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var incentiveIdRule []interface{}
	for _, incentiveIdItem := range incentiveId {
		incentiveIdRule = append(incentiveIdRule, incentiveIdItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.FilterLogs(opts, "TokenUnstaked", tokenIdRule, incentiveIdRule)
	if err != nil {
		return nil, err
	}
	return &UniswapV3StakerTokenUnstakedIterator{contract: _UniswapV3Staker.contract, event: "TokenUnstaked", logs: logs, sub: sub}, nil
}

// WatchTokenUnstaked is a free log subscription operation binding the contract event 0xe1ba67e807ae0efa0a9549f9520ddc15c27f0a4dae2bc045e800ca66a940778f.
//
// Solidity: event TokenUnstaked(uint256 indexed tokenId, bytes32 indexed incentiveId)
func (_UniswapV3Staker *UniswapV3StakerFilterer) WatchTokenUnstaked(opts *bind.WatchOpts, sink chan<- *UniswapV3StakerTokenUnstaked, tokenId []*big.Int, incentiveId [][32]byte) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var incentiveIdRule []interface{}
	for _, incentiveIdItem := range incentiveId {
		incentiveIdRule = append(incentiveIdRule, incentiveIdItem)
	}

	logs, sub, err := _UniswapV3Staker.contract.WatchLogs(opts, "TokenUnstaked", tokenIdRule, incentiveIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapV3StakerTokenUnstaked)
				if err := _UniswapV3Staker.contract.UnpackLog(event, "TokenUnstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenUnstaked is a log parse operation binding the contract event 0xe1ba67e807ae0efa0a9549f9520ddc15c27f0a4dae2bc045e800ca66a940778f.
//
// Solidity: event TokenUnstaked(uint256 indexed tokenId, bytes32 indexed incentiveId)
func (_UniswapV3Staker *UniswapV3StakerFilterer) ParseTokenUnstaked(log types.Log) (*UniswapV3StakerTokenUnstaked, error) {
	event := new(UniswapV3StakerTokenUnstaked)
	if err := _UniswapV3Staker.contract.UnpackLog(event, "TokenUnstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
