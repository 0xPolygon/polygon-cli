package abi

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// TestHashFunctionSelector tests function signature from various common signatures documented by openchain.xyz:
// https://openchain.xyz/signatures
func TestHashFunctionSelector(t *testing.T) {
	type Test struct {
		Name              string
		FunctionSignature string
		Expected          string
		ErrMsg            string
	}

	tests := []Test{
		{
			Name:              "mint",
			FunctionSignature: "minted(uint256,string,string,string,uint256,string,string,string,string[],(string,string))",
			Expected:          "019015a3",
		},
		{
			Name:              "mintSuccessful",
			FunctionSignature: "mintSuccessful(address,uint256,uint256,bytes)",
			Expected:          "001d98a3",
		},
		{
			Name:              "sendForTokens",
			FunctionSignature: "sendForTokens(uint256,address[])",
			Expected:          "1114fd36",
		},
		{
			Name:              "sendTransfer",
			FunctionSignature: "sendTransfer(address,(uint256,address,address),(bytes,bytes),(address,address,uint256,uint256))",
			Expected:          "4b776c6d",
		},
		{
			Name:              "invalidpppppparenthesis",
			FunctionSignature: "sendTransfer(address,uint256",
			ErrMsg:            "invalid parenthesis",
		},
	}

	for _, tc := range tests {
		t.Run(tc.Name, func(t *testing.T) {
			output, err := HashFunctionSelector(tc.FunctionSignature)
			if tc.ErrMsg != "" {
				assert.ErrorContains(t, err, tc.ErrMsg)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, output, tc.Expected)
			}
		})
	}
}

// TestAbiEncode tests various encoding of function signatures and their inputs.
// The expected values are derived from `cast calldata`.
func TestAbiEncode(t *testing.T) {
	type AbiEncodeInput struct {
		FunctionSignature string
		FunctionInputs    []string
	}

	type Test struct {
		Name     string
		Input    AbiEncodeInput
		Expected string
		ErrMsg   string
	}

	tests := []Test{
		{
			// cast calldata "f(string)(string)" "adfjkadhsffdhjksfdahjsfhadjsfasdhjfdsjlkfadshkjladfshjkadfskjladsfjkldfajhkdjafhkadsfjkldjksafjkhldsfhjksadflhj kldsafjklhadfsjkahlsdfkjlhasdfjkadfhslajkhsadfsjkl"
			Name: "Standard String Encoding",
			Input: AbiEncodeInput{
				FunctionSignature: "f(string)(string)",
				FunctionInputs: []string{
					"adfjkadhsffdhjksfdahjsfhadjsfasdhjfdsjlkfadshkjladfshjkadfskjladsfjkldfajhkdjafhkadsfjkldjksafjkhldsfhjksadflhj kldsafjklhadfsjkahlsdfkjlhasdfjkadfhslajkhsadfsjkl",
				},
			},
			Expected: "0x91e145ef000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a26164666a6b61646873666664686a6b73666461686a73666861646a7366617364686a6664736a6c6b66616473686b6a6c61646673686a6b616466736b6a6c616473666a6b6c6466616a686b646a6166686b616473666a6b6c646a6b7361666a6b686c647366686a6b736164666c686a206b6c647361666a6b6c68616466736a6b61686c7364666b6a6c68617364666a6b61646668736c616a6b6873616466736a6b6c000000000000000000000000000000000000000000000000000000000000",
		},
		{
			// cast calldata "f(string[])" '[]'
			Name: "Empty String Array Encoding",
			Input: AbiEncodeInput{
				FunctionSignature: "f(string[])(string)",
				FunctionInputs: []string{
					"[]",
				},
			},
			Expected: "0xe9cc878000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			// cast calldata "getMultipliedAndAddNumber(uint256,bytes3,bool,string,address,int256[],string[],string[][],(string,uint256,bool[]))" 100000 "0x123456" true "abc" "0x6fda56c57b0acadb96ed5624ac500c0429d59429" "[1,2,3,4]" '["hi","bye","YOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ","test"]' '[["hi","bye","test"], ["hhhhh","byebye","bytebye","bytebyte"]]' '("yesyesyesyes", 369, [true,false,true])'
			Name: "A complex encoding",
			Input: AbiEncodeInput{
				FunctionSignature: "getMultipliedAndAddNumber(uint256,bytes3,bool,string,address,int256[],string[],string[][],(string,uint256,bool[]))",
				FunctionInputs: []string{
					"100000",
					"0x123456",
					"true",
					"abc",
					"0x6fda56c57b0acadb96ed5624ac500c0429d59429",
					"[1,2,3,4]",
					`["hi","bye","YOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ","test"]`,
					`[["hi","bye","test"], ["hhhhh","byebye","bytebye","bytebyte"]]`,
					`("yesyesyesyes", 369, [true,false,true])`,
				},
			},
			Expected: `0xaf1174e400000000000000000000000000000000000000000000000000000000000186a01234560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001200000000000000000000000006fda56c57b0acadb96ed5624ac500c0429d594290000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003cc00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000026869000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000362796500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022594f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f5aa000000000000000000000000000000000000000000000000000000000000000eca0000000000000000000000000000000000000000000000000000000000000000c79657379657379657379657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001`,
		},
	}

	for _, tc := range tests {
		t.Run(tc.Name, func(t *testing.T) {
			output, err := AbiEncode(tc.Input.FunctionSignature, tc.Input.FunctionInputs)
			if tc.ErrMsg != "" {
				assert.ErrorContains(t, err, tc.ErrMsg)
			} else {
				assert.NoError(t, err)
				assert.Equal(t, output, tc.Expected)
			}
		})
	}
}
