name: CI
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "**"
    types: [opened, synchronize]

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.19
      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
      - name: Install shadow
        run: go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
      - name: Run all the linter tools against code
        run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.19
      - name: Run tests
        run: make test
  
  doc:
    name: Doc
    runs-on: ubuntu-latest
    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.19
      - name: Try to update polycli documentation
        run: make gen-doc
      - name: Check if the documentation is up to date
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "❌ Error: Documentation is not up to date. Please run \`make gen-doc\`."
            exit 1
          else
            echo "✅ The documentation is up to date."
          fi